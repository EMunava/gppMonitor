// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_transactionCountLog is a generated GoMock package.
package transactionCountLog

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// RetrieveSAPTransactions mocks base method
func (m *MockService) RetrieveSAPTransactions() {
	m.ctrl.Call(m, "RetrieveSAPTransactions")
}

// RetrieveSAPTransactions indicates an expected call of RetrieveSAPTransactions
func (mr *MockServiceMockRecorder) RetrieveSAPTransactions() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveSAPTransactions", reflect.TypeOf((*MockService)(nil).RetrieveSAPTransactions))
}

// RetrieveLEGTransactions mocks base method
func (m *MockService) RetrieveLEGTransactions() {
	m.ctrl.Call(m, "RetrieveLEGTransactions")
}

// RetrieveLEGTransactions indicates an expected call of RetrieveLEGTransactions
func (mr *MockServiceMockRecorder) RetrieveLEGTransactions() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveLEGTransactions", reflect.TypeOf((*MockService)(nil).RetrieveLEGTransactions))
}

// RetrieveLEGSAPTransactions mocks base method
func (m *MockService) RetrieveLEGSAPTransactions() {
	m.ctrl.Call(m, "RetrieveLEGSAPTransactions")
}

// RetrieveLEGSAPTransactions indicates an expected call of RetrieveLEGSAPTransactions
func (mr *MockServiceMockRecorder) RetrieveLEGSAPTransactions() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveLEGSAPTransactions", reflect.TypeOf((*MockService)(nil).RetrieveLEGSAPTransactions))
}

// RetrieveNightFileTransactions mocks base method
func (m *MockService) RetrieveNightFileTransactions(fileName string) int {
	ret := m.ctrl.Call(m, "RetrieveNightFileTransactions", fileName)
	ret0, _ := ret[0].(int)
	return ret0
}

// RetrieveNightFileTransactions indicates an expected call of RetrieveNightFileTransactions
func (mr *MockServiceMockRecorder) RetrieveNightFileTransactions(fileName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveNightFileTransactions", reflect.TypeOf((*MockService)(nil).RetrieveNightFileTransactions), fileName)
}

// retreiveTransactions mocks base method
func (m *MockService) retreiveTransactions(contains string, exclude ...string) error {
	varargs := []interface{}{contains}
	for _, a := range exclude {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "retreiveTransactions", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// retreiveTransactions indicates an expected call of retreiveTransactions
func (mr *MockServiceMockRecorder) retreiveTransactions(contains interface{}, exclude ...interface{}) *gomock.Call {
	varargs := append([]interface{}{contains}, exclude...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "retreiveTransactions", reflect.TypeOf((*MockService)(nil).retreiveTransactions), varargs...)
}
