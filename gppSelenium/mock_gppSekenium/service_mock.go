// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_gppSelenium is a generated GoMock package.
package mock_gppSekenium

import (
	gomock "github.com/golang/mock/gomock"
	selenium "github.com/tebeka/selenium"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// WaitForWaitFor mocks base method
func (m *MockService) WaitForWaitFor() {
	m.ctrl.Call(m, "WaitForWaitFor")
}

// WaitForWaitFor indicates an expected call of WaitForWaitFor
func (mr *MockServiceMockRecorder) WaitForWaitFor() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForWaitFor", reflect.TypeOf((*MockService)(nil).WaitForWaitFor))
}

// LogIn mocks base method
func (m *MockService) LogIn() {
	m.ctrl.Call(m, "LogIn")
}

// LogIn indicates an expected call of LogIn
func (mr *MockServiceMockRecorder) LogIn() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogIn", reflect.TypeOf((*MockService)(nil).LogIn))
}

// LogOut mocks base method
func (m *MockService) LogOut() {
	m.ctrl.Call(m, "LogOut")
}

// LogOut indicates an expected call of LogOut
func (mr *MockServiceMockRecorder) LogOut() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogOut", reflect.TypeOf((*MockService)(nil).LogOut))
}

// NewClient mocks base method
func (m *MockService) NewClient() error {
	ret := m.ctrl.Call(m, "NewClient")
	ret0, _ := ret[0].(error)
	return ret0
}

// NewClient indicates an expected call of NewClient
func (mr *MockServiceMockRecorder) NewClient() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClient", reflect.TypeOf((*MockService)(nil).NewClient))
}

// HandleSeleniumError mocks base method
func (m *MockService) HandleSeleniumError(internal bool, err error) {
	m.ctrl.Call(m, "HandleSeleniumError", internal, err)
}

// HandleSeleniumError indicates an expected call of HandleSeleniumError
func (mr *MockServiceMockRecorder) HandleSeleniumError(internal, err interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSeleniumError", reflect.TypeOf((*MockService)(nil).HandleSeleniumError), internal, err)
}

// Driver mocks base method
func (m *MockService) Driver() selenium.WebDriver {
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(selenium.WebDriver)
	return ret0
}

// Driver indicates an expected call of Driver
func (mr *MockServiceMockRecorder) Driver() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*MockService)(nil).Driver))
}

// ClickByClassName mocks base method
func (m *MockService) ClickByClassName(cn string) {
	m.ctrl.Call(m, "ClickByClassName", cn)
}

// ClickByClassName indicates an expected call of ClickByClassName
func (mr *MockServiceMockRecorder) ClickByClassName(cn interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClickByClassName", reflect.TypeOf((*MockService)(nil).ClickByClassName), cn)
}

// ClickByXPath mocks base method
func (m *MockService) ClickByXPath(xp string) {
	m.ctrl.Call(m, "ClickByXPath", xp)
}

// ClickByXPath indicates an expected call of ClickByXPath
func (mr *MockServiceMockRecorder) ClickByXPath(xp interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClickByXPath", reflect.TypeOf((*MockService)(nil).ClickByXPath), xp)
}

// ClickByCSSSelector mocks base method
func (m *MockService) ClickByCSSSelector(cs string) {
	m.ctrl.Call(m, "ClickByCSSSelector", cs)
}

// ClickByCSSSelector indicates an expected call of ClickByCSSSelector
func (mr *MockServiceMockRecorder) ClickByCSSSelector(cs interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClickByCSSSelector", reflect.TypeOf((*MockService)(nil).ClickByCSSSelector), cs)
}

// WaitFor mocks base method
func (m *MockService) WaitFor(findBy, selector string) {
	m.ctrl.Call(m, "WaitFor", findBy, selector)
}

// WaitFor indicates an expected call of WaitFor
func (mr *MockServiceMockRecorder) WaitFor(findBy, selector interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitFor", reflect.TypeOf((*MockService)(nil).WaitFor), findBy, selector)
}
